<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.jboss.examples</groupId>
	<artifactId>ticket-monster</artifactId>
	<version>2.7.0.Final</version>
	<packaging>war</packaging>
	<name>ticket-monster</name>
	<description>A starter HTML5 + REST webapp project for use on JBoss EAP.</description>

	<!-- Activate JBoss Product Maven repository. NOTE: Configuring the Maven 
		repository in the pom.xml file is not a recommended procedure and is only 
		done here to make it easier to use the quickstarts. For more information 
		about how to configure Maven for your application, see the section entitled 
		'Use the Maven Repository' in the Development Guide for JBoss EAP 6 located 
		here: https://access.redhat.com/documentation/en-US/JBoss_Enterprise_Application_Platform/6.3/html-single/Development_Guide -->
	<repositories>
		<repository>
			<id>redhat-techpreview-all-repository</id>
			<url>https://maven.repository.redhat.com/techpreview/all/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>redhat-techpreview-all-repository</id>
			<url>https://maven.repository.redhat.com/techpreview/all/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>

	<properties>
		<!-- Explicitly declaring the source encoding eliminates the following 
			message: -->
		<!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered 
			resources, i.e. build is platform dependent! -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<!-- Timestamp format for the maven.build.timestamp property -->
		<!-- You can reference property in pom.xml or filtered resources (must 
			enable third-party plugin if using Maven < 2.1) -->
		<maven.build.timestamp.format>yyyyMMdd'T'HHmmss</maven.build.timestamp.format>
		<!-- Specify the JBoss AS directory to be the JBOSS_HOME environment variable -->
		<jboss.home>${env.JBOSS_HOME}</jboss.home>
		<!-- Define the version of JBoss' Java EE 6 APIs and Tools we want to import. -->
		<!-- <jboss.bom.version>1.0.4.Final-redhat-9</jboss.bom.version> -->
		<!-- Alternatively, comment out the above line, and un-comment the line 
			below to use version 1.0.4.Final-redhat-9 which is a release certified to 
			work with JBoss EAP 6.2. It requires you have access to the JBoss EAP 6.2 
			maven repository. -->
		<version.jboss.bom.eap>6.3.2.GA</version.jboss.bom.eap>
		<version.jboss.bom.wfk>2.7.0-redhat-1</version.jboss.bom.wfk>
		<buildhelper.plugin.version>1.7</buildhelper.plugin.version>

		<!-- Used to overide source dirs for Kubernetes template generation -->
		<src.dir>src/main/java</src.dir>
		<src.test.dir>src/test/java</src.test.dir>
		
	</properties>

	<dependencyManagement>
		<dependencies>
			<!-- JBoss distributes a complete set of Java EE 6 APIs including a Bill 
				of Materials (BOM). A BOM specifies the versions of a "stack" (or a collection) 
				of artifacts. We use this here so that we always get the correct versions 
				of artifacts. Here we use the jboss-javaee-6.0-with-tools stack (you can 
				read this as the JBoss stack of the Java EE 6 APIs, with some extras tools 
				for your project, such as Arquillian for testing), the jboss-javaee-6.0-with-hibernate 
				stack (you can read this as the JBoss stack of the Java EE 6 APIs, with extras 
				from the Hibernate family of projects), and the jboss-javaee-6.0-with-resteasy 
				stack (you can read this as the JBoss stack of the Java EE 6 APIs, with extras 
				from the RESTEasy project). -->
			<dependency>
				<groupId>org.jboss.bom.wfk</groupId>
				<artifactId>jboss-javaee-6.0-with-tools</artifactId>
				<version>${version.jboss.bom.wfk}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.jboss.bom.eap</groupId>
				<artifactId>jboss-javaee-6.0-with-hibernate</artifactId>
				<version>${version.jboss.bom.eap}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.jboss.bom.eap</groupId>
				<artifactId>jboss-javaee-6.0-with-resteasy</artifactId>
				<version>${version.jboss.bom.eap}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>

		<!-- First declare the APIs we depend on and need for compilation. All 
			of them are provided by JBoss EAP -->

		<!-- Import the CDI API, we use provided scope as the API is included in 
			JBoss EAP -->
		<dependency>
			<groupId>javax.enterprise</groupId>
			<artifactId>cdi-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the Common Annotations API (JSR-250), we use provided scope 
			as the API is included in JBoss EAP -->
		<dependency>
			<groupId>org.jboss.spec.javax.annotation</groupId>
			<artifactId>jboss-annotations-api_1.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the JAX-RS API, we use provided scope as the API is included 
			in JBoss EAP -->
		<dependency>
			<groupId>org.jboss.spec.javax.ws.rs</groupId>
			<artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the JPA API, we use provided scope as the API is included in 
			JBoss EAP -->
		<dependency>
			<groupId>org.hibernate.javax.persistence</groupId>
			<artifactId>hibernate-jpa-2.0-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the EJB API, we use provided scope as the API is included in 
			JBoss EAP -->
		<dependency>
			<groupId>org.jboss.spec.javax.ejb</groupId>
			<artifactId>jboss-ejb-api_3.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Import the Servlet API, we use provided scope as the API is included 
			in JBoss EAP -->
		<dependency>
			<groupId>org.jboss.spec.javax.servlet</groupId>
			<artifactId>jboss-servlet-api_3.0_spec</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- JSR-303 (Bean Validation) Implementation -->
		<!-- Provides portable constraints such as @Email -->
		<!-- Hibernate Validator is shipped in JBoss EAP -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<scope>provided</scope>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>


		<!-- Now we declare any tools needed -->

		<!-- Annotation processor to generate the JPA 2.0 metamodel classes for 
			typesafe criteria queries -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-jpamodelgen</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Needed for running tests (you may also use TestNG) -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Optional, but highly recommended -->
		<!-- Arquillian allows you to test enterprise code such as EJBs and Transactional(JTA) 
			JPA from JUnit/TestNG -->
		<dependency>
			<groupId>org.jboss.arquillian.junit</groupId>
			<artifactId>arquillian-junit-container</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.arquillian.protocol</groupId>
			<artifactId>arquillian-protocol-servlet</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.shrinkwrap.resolver</groupId>
			<artifactId>shrinkwrap-resolver-depchain</artifactId>
			<type>pom</type>
			<scope>test</scope>
		</dependency>

		<!-- RESTEasy dependencies that bring in Jackson Core and RESTEasy APIs+SPIs, 
			which we use for fine tuning the content of the JSON responses -->
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-jackson-provider</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-jaxrs</artifactId>
			<scope>provided</scope>
		</dependency>

	</dependencies>

	<build>
		<sourceDirectory>${src.dir}</sourceDirectory>
		<testSourceDirectory>${src.test.dir}</testSourceDirectory>

		<!-- Maven will append the version to the finalName (which is the name 
			given to the generated war, and hence the context root) -->
		<finalName>${project.artifactId}</finalName>
		<pluginManagement>

			<plugins>
				<!-- Compiler plugin enforces Java 1.6 compatibility and activates annotation 
					processors -->
				<plugin>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>2.3.1</version>
					<configuration>
						<source>1.8</source>
						<target>1.8</target>
					</configuration>
				</plugin>
				<plugin>
					<artifactId>maven-war-plugin</artifactId>
					<version>2.1.1</version>
					<configuration>
						<failOnMissingWebXml>false</failOnMissingWebXml>
						<archive>
							<manifestEntries>
								<Dependencies>org.jboss.as.naming,org.jboss.as.server,org.jboss.msc</Dependencies>
							</manifestEntries>
						</archive>
					</configuration>
				</plugin>

				<!-- The JBoss AS plugin deploys your war to a local JBoss AS container -->
				<!-- To use run: mvn package jboss-as:deploy -->
				<plugin>
					<groupId>org.jboss.as.plugins</groupId>
					<artifactId>jboss-as-maven-plugin</artifactId>
					<version>7.4.Final</version>
				</plugin>

				<plugin>
					<groupId>org.wildfly.plugins</groupId>
					<artifactId>wildfly-maven-plugin</artifactId>
					<version>1.1.0.Alpha11</version>
				</plugin>

			</plugins>
		</pluginManagement>
	</build>

	<profiles>
		<profile>
			<!-- The default profile skips all tests, though you can tune it to run 
				just unit tests based on a custom pattern -->
			<!-- Seperate profiles are provided for running all tests, including Arquillian 
				tests that execute in the specified container -->
			<id>default</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.4.3</version>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>


		<profile>
			<!-- An optional Arquillian testing profile that executes tests in your 
				JBoss AS instance -->
			<!-- This profile will start a new JBoss AS instance, and execute the 
				test, shutting it down when done -->
			<!-- Run with: mvn clean test -Parq-jbossas-managed -->
			<id>arq-jbossas-managed</id>
			<dependencies>
				<dependency>
					<groupId>org.jboss.as</groupId>
					<artifactId>jboss-as-arquillian-container-managed</artifactId>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>

		<profile>
			<!-- An optional Arquillian testing profile that executes tests in a remote 
				JBoss AS instance -->
			<!-- Run with: mvn clean test -Parq-jbossas-remote -->
			<id>arq-jbossas-remote</id>
			<dependencies>
				<dependency>
					<groupId>org.jboss.as</groupId>
					<artifactId>jboss-as-arquillian-container-remote</artifactId>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>

		<profile>
			<!-- An optional profile that produces a WAR to be used with a PostgreSQL 
				cartridge on OpenShift -->
			<id>postgresql-openshift</id>
			<build>
				<resources>
					<resource>
						<directory>src/main/resources-postgresql-openshift</directory>
					</resource>
					<resource>
						<directory>src/main/resources</directory>
						<includes>
							<include>**/*</include>
						</includes>
						<excludes>
							<exclude>META-INF/*</exclude>
						</excludes>
					</resource>
				</resources>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.4.3</version>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- An optional profile that produces a WAR to be used with a MySQL cartridge 
				on OpenShift -->
			<id>mysql-openshift</id>
			<build>
				<resources>
					<resource>
						<directory>src/main/resources-mysql-openshift</directory>
					</resource>
					<resource>
						<directory>src/main/resources</directory>
						<includes>
							<include>**/*</include>
						</includes>
						<excludes>
							<exclude>META-INF/*</exclude>
						</excludes>
					</resource>
				</resources>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.4.3</version>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- An optional profile that enables a server managed postgresql data 
				source -->
			<id>postgresql</id>
			<build>
				<resources>
					<resource>
						<directory>src/main/resources-postgresql</directory>
					</resource>
					<resource>
						<directory>src/main/resources</directory>
						<includes>
							<include>**/*</include>
						</includes>
						<excludes>
							<exclude>META-INF/*</exclude>
						</excludes>
					</resource>
				</resources>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.4.3</version>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- An optional profile that enables a server managed mysql data source -->
			<id>mysql</id>
			<build>
				<resources>
					<resource>
						<directory>src/main/resources-mysql</directory>
					</resource>
					<resource>
						<directory>src/main/resources</directory>
						<includes>
							<include>**/*</include>
						</includes>
						<excludes>
							<exclude>META-INF/*</exclude>
						</excludes>
					</resource>
				</resources>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.4.3</version>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- Create a release distribution with the right directory layout. -->
			<!-- product build specific assembly -->
			<id>release-dist</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<configuration>
							<descriptors>
								<descriptor>src/main/assembly/assembly.xml</descriptor>
							</descriptors>
						</configuration>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- When built in OpenShift the 'openshift' profile will be used when 
				invoking mvn. -->
			<!-- Use this profile for any OpenShift specific customization your app 
				will need. -->
			<!-- By default that is to put the resulting archive into the 'deployments' 
				folder. -->
			<!-- http://maven.apache.org/guides/mini/guide-building-for-different-environments.html -->
			<id>openshift</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-war-plugin</artifactId>
						<configuration>
							<outputDirectory>deployments</outputDirectory>
							<warName>ROOT</warName>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>kube-dsl</id>
			<properties>

				<src.dir>openshift/src/config/java</src.dir>
				<src.test.dir>openshift/src/config-test/java</src.test.dir>
				

				<maven.test.skip>true</maven.test.skip>

				<fabric8.version>2.2.136</fabric8.version>
				<fabric8.useBuildConfig>true</fabric8.useBuildConfig>
				<fabric8.useDeploymentConfig>true</fabric8.useDeploymentConfig>

				<fabric8.parameter.GIT_URI.description>URL to the Git repository</fabric8.parameter.GIT_URI.description>
				<fabric8.parameter.GIT_URI.value>https://github.com/aclarkrh/ocp-ticket-monster</fabric8.parameter.GIT_URI.value>

				<!-- This value is normally populated at build time by the Jenkins job -->
				<fabric8.parameter.SOURCE_REPOSITORY_REF.description>Git branch/tag	references</fabric8.parameter.SOURCE_REPOSITORY_REF.description>
				<fabric8.parameter.SOURCE_REPOSITORY_REF.value></fabric8.parameter.SOURCE_REPOSITORY_REF.value>

				<fabric8.parameter.CONTEXT_DIR.description>The path within the repository where the OpenShift code artifacts can be found with the repo.</fabric8.parameter.CONTEXT_DIR.description>
				<fabric8.parameter.CONTEXT_DIR.value>openshift</fabric8.parameter.CONTEXT_DIR.value>

				<fabric8.parameter.SOURCE_SECRET.description>The secret containing the git credentials.</fabric8.parameter.SOURCE_SECRET.description>
				<fabric8.parameter.SOURCE_SECRET.value>git-basic-secret</fabric8.parameter.SOURCE_SECRET.value>

				<fabric8.parameter.WAR_FILE_URL.description>The URL to retirve the application WAR file from.</fabric8.parameter.WAR_FILE_URL.description>
				<fabric8.parameter.WAR_FILE_URL.value>http://aclark-OSX.home:8081/artifactory/list/libs-release-local/org/jboss/examples/${project.artifactId}/${project.version}/${project.artifactId}-${project.version}.war</fabric8.parameter.WAR_FILE_URL.value>

				<fabric8.parameter.APPLICATION_NAME.description>The name for the application.</fabric8.parameter.APPLICATION_NAME.description>
				<fabric8.parameter.APPLICATION_NAME.value>${project.artifactId}</fabric8.parameter.APPLICATION_NAME.value>

				<fabric8.parameter.APPLICATION_VERSION.description>The version of the application.</fabric8.parameter.APPLICATION_VERSION.description>
				<fabric8.parameter.APPLICATION_VERSION.value>${project.version}</fabric8.parameter.APPLICATION_VERSION.value>

				<fabric8.parameter.HOSTNAME_HTTP.description>Custom hostname for http service route. Leave blank for default hostname, e.g.: &lt;application-name&gt;-&lt;project&gt;.&lt;default-domain-suffix&gt;</fabric8.parameter.HOSTNAME_HTTP.description>
				<fabric8.parameter.HOSTNAME_HTTP.value></fabric8.parameter.HOSTNAME_HTTP.value>

				<fabric8.parameter.HOSTNAME_HTTPS.description>Custom hostname for https service route. Leave blank for default hostname, e.g. secure-&lt;application-name&gt;-&lt;project&gt;.&lt;default-domain-suffix&gt;</fabric8.parameter.HOSTNAME_HTTPS.description>
				<fabric8.parameter.HOSTNAME_HTTPS.value></fabric8.parameter.HOSTNAME_HTTPS.value>

				<fabric8.parameter.XPAAS_IS_PULL_NAMESPACE.description>Project where the xPaaS ImageStreams and BuildConfigs are installed.</fabric8.parameter.XPAAS_IS_PULL_NAMESPACE.description>
				<fabric8.parameter.XPAAS_IS_PULL_NAMESPACE.value>openshift</fabric8.parameter.XPAAS_IS_PULL_NAMESPACE.value>

				<fabric8.parameter.XPAAS_IS_NAME.description>The xPaaS Image name.</fabric8.parameter.XPAAS_IS_NAME.description>
				<fabric8.parameter.XPAAS_IS_NAME.value>jboss-eap70-openshift</fabric8.parameter.XPAAS_IS_NAME.value>

				<fabric8.parameter.XPAAS_IS_TAG.description>Tag that the xPaaS ImageStream should be pushed to</fabric8.parameter.XPAAS_IS_TAG.description>
				<fabric8.parameter.XPAAS_IS_TAG.value>latest</fabric8.parameter.XPAAS_IS_TAG.value>

				<fabric8.parameter.APP_IS_PULL_NAMESPACE.description>Project where the application ImageStreams and BuildConfigs are installed.</fabric8.parameter.APP_IS_PULL_NAMESPACE.description>
				<fabric8.parameter.APP_IS_PULL_NAMESPACE.value>ticket-monster</fabric8.parameter.APP_IS_PULL_NAMESPACE.value>

				<fabric8.parameter.READINESS_PROBE_PATH.description>The path to probe for the HTTP readiness check</fabric8.parameter.READINESS_PROBE_PATH.description>
				<fabric8.parameter.READINESS_PROBE_PATH.value>/#events</fabric8.parameter.READINESS_PROBE_PATH.value>

				<fabric8.parameter.LIVENESS_PROBE_PATH.description>The path to probe for the HTTP liveness check</fabric8.parameter.LIVENESS_PROBE_PATH.description>
				<fabric8.parameter.LIVENESS_PROBE_PATH.value>/#events</fabric8.parameter.LIVENESS_PROBE_PATH.value>

				<fabric8.parameter.CPU_REQUEST.description>The requested CPU resource for a container</fabric8.parameter.CPU_REQUEST.description>
				<fabric8.parameter.CPU_REQUEST.value>200m</fabric8.parameter.CPU_REQUEST.value>

				<fabric8.parameter.MEM_REQUEST.description>The requested memory resource for a container</fabric8.parameter.MEM_REQUEST.description>
				<fabric8.parameter.MEM_REQUEST.value>512Mi</fabric8.parameter.MEM_REQUEST.value>

				<fabric8.parameter.CPU_LIMIT.description>The CPU resource limit for a container</fabric8.parameter.CPU_LIMIT.description>
				<fabric8.parameter.CPU_LIMIT.value>800m</fabric8.parameter.CPU_LIMIT.value>

				<fabric8.parameter.DB_CONFIGMAP_NAME.description>The name of the configmap containing database connection parameters</fabric8.parameter.DB_CONFIGMAP_NAME.description>
				<fabric8.parameter.DB_CONFIGMAP_NAME.value>ticket-db-config</fabric8.parameter.DB_CONFIGMAP_NAME.value>

				<fabric8.parameter.DB_SECRET_NAME.description>The name of the secret containing database connection credentials</fabric8.parameter.DB_SECRET_NAME.description>
				<fabric8.parameter.DB_SECRET_NAME.value>ticket-db-credentials</fabric8.parameter.DB_SECRET_NAME.value>

			</properties>
			<dependencies>
				<!--these dependencies are only used for KubeDSL generation -->
				<dependency>
					<groupId>io.fabric8</groupId>
					<artifactId>kubernetes-generator</artifactId>
					<version>${fabric8.version}</version>
					<scope>provided</scope>
				</dependency>
				<dependency>
					<groupId>com.google.guava</groupId>
					<artifactId>guava</artifactId>
					<version>19.0</version>
					<scope>provided</scope>
				</dependency>
				<dependency>
					<groupId>org.codehaus.groovy</groupId>
					<artifactId>groovy-all</artifactId>
					<version>2.4.7</version>
					<scope>provided</scope>
				</dependency>
			</dependencies>
			<build>
				<finalName>${project.artifactId}</finalName>
				<resources>
					<resource>
						<directory>openshift/src/config/resources</directory>
						<filtering>true</filtering>
					</resource>
				</resources>
				<testResources>
					<testResource>
						<directory>openshift/src/config-test/resources</directory>
						<filtering>true</filtering>
					</testResource>
				</testResources>
				<plugins>
					<plugin>
						<groupId>io.fabric8</groupId>
						<artifactId>fabric8-maven-plugin</artifactId>
						<version>${fabric8.version}</version>
						<executions>
							<execution>
								<id>json</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>json</goal>
								</goals>
							</execution>
							<execution>
								<id>attach</id>
								<phase>package</phase>
								<goals>
									<goal>attach</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.gmavenplus</groupId>
						<artifactId>gmavenplus-plugin</artifactId>
						<version>1.5</version>
						<executions>
							<execution>
								<id>fix-values</id>
								<phase>initialize</phase>
								<goals>
									<goal>execute</goal>
								</goals>
								<configuration>
									<scripts>
										<!-- OpenShift doesn't like certain object names: -->
										<!-- When version contains uppercase SNAPSHOT OCP complains, so 
											convert to lower case -->
										<!-- When version contains '.' if fails, so convert to '-' -->
										<!-- *** WORKAROUND - REQUIRES PROPER SOLUTION *** Service names 
											can't be greater than 24 characters, so drop '-snapshot' -->
										<script>
                                                <![CDATA[
                                                        import org.apache.commons.lang.StringUtils

                                                        project.properties["fabric8.parameter.APPLICATION_VERSION.value"] = StringUtils.lowerCase(project.properties["fabric8.parameter.APPLICATION_VERSION.value"])
                                                        project.properties["fabric8.parameter.APPLICATION_VERSION.value"] = StringUtils.replace(project.properties["fabric8.parameter.APPLICATION_VERSION.value"], ".", "-")
                                                        project.properties["fabric8.parameter.APPLICATION_VERSION.value"] = StringUtils.replace(project.properties["fabric8.parameter.APPLICATION_VERSION.value"], "-snapshot", "-s")
                                                        project.properties["fabric8.parameter.APPLICATION_VERSION.value"] = StringUtils.replace(project.properties["fabric8.parameter.APPLICATION_VERSION.value"], "-final", "-f")

                                                        if(StringUtils.contains(project.properties["fabric8.parameter.WAR_FILE_URL.value"], "SNAPSHOT"))
                                                                project.properties["fabric8.parameter.WAR_FILE_URL.value"] = StringUtils.replace(project.properties["fabric8.parameter.WAR_FILE_URL.value"], "release", "snapshot")
                                                ]]>
										</script>
									</scripts>
								</configuration>
							</execution>
							<execution>
								<id>split-build-run</id>
								<phase>compile</phase>
								<goals>
									<goal>execute</goal>
								</goals>
								<configuration>
									<properties>
										<property>
											<name>templateName</name>
											<value>${project.artifactId}-${project.version}</value>
										</property>
									</properties>
									<scripts>
										<script>file:///${project.basedir}/openshift/src/config/resources/split-templates.groovy</script>
									</scripts>
								</configuration>
							</execution>
						</executions>

						<dependencies>
							<dependency>
								<groupId>org.codehaus.groovy</groupId>
								<artifactId>groovy-all</artifactId>
								<version>2.4.7</version>
								<scope>runtime</scope>
							</dependency>
						</dependencies>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<version>1.9.1</version>
						<executions>
							<execution>
								<id>attach-artifacts</id>
								<phase>package</phase>
								<goals>
									<goal>attach-artifact</goal>
								</goals>
								<configuration>
									<artifacts>
										<artifact>
											<file>target/classes/kubernetes-build.json</file>
											<type>json</type>
											<classifier>kubernetes-build</classifier>
										</artifact>
										<artifact>
											<file>target/classes/kubernetes-run.json</file>
											<type>json</type>
											<classifier>kubernetes-run</classifier>
										</artifact>
									</artifacts>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

	</profiles>
</project>
